{"version":3,"sources":["components/Buttons/Buttons.jsx","Redux/alertReducer.js","Redux/actionTypes.js","Redux/imageReducer.js","Redux/buttonsReducer.js","components/Buttons/ButtonsContainer.js","DAL/api.js","components/Images/Image.jsx","components/Images/ImageGroup.jsx","components/Images/Images.jsx","Redux/selectors.js","components/Images/ImagesContainer.js","components/Alert/AlertComponent.jsx","App.js","serviceWorker.js","Redux/store.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","display","justifyContent","GreenButton","withStyles","backgroundColor","green","Button","Buttons","tag","changeTag","isGroup","isLoading","handleClickLoadButton","handleClickClearButton","changeIsGroup","classes","className","TextField","label","variant","value","onChange","e","currentTarget","trim","color","disabled","onClick","initialState","message","typeAlert","isVisible","showMsg","type","hideMsg","alertReducer","state","action","images","changeIsLoading","imageReducer","image","buttonsReducer","connect","buttons","getImage","dispatch","axios","get","then","response","data","getImageApi","Object","keys","length","newImage","id","url","downsized_large","catch","error","finally","clearImage","props","width","cursor","media","height","Image","Card","CardMedia","title","padding","text","textAlign","ImageGroup","groupName","Typography","gutterBottom","component","map","key","Images","getImagesRslc","createSelector","reduce","acc","img","push","alert","Alert","onClose","severity","App","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"wSAOMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACF,QAAS,CACLC,OAAQF,EAAMG,QAAQ,IAE1BC,QAAS,OACTC,eAAgB,SAChBH,OAAQ,iBAIVI,EAAcC,aAAW,SAAAP,GAAK,MAAK,CACrCC,KAAM,CACFO,gBAAiBC,IAAM,KACvB,UAAW,CACPD,gBAAiBC,IAAM,UAJfF,CAOhBG,KAyCWC,EArCC,SAAC,GAAwG,IAAvGC,EAAsG,EAAtGA,IAAKC,EAAiG,EAAjGA,UAAWC,EAAsF,EAAtFA,QAASC,EAA6E,EAA7EA,UAAWC,EAAkE,EAAlEA,sBAAuBC,EAA2C,EAA3CA,uBAAwBC,EAAmB,EAAnBA,cAM3FC,EAAUrB,IAChB,OACI,yBAAKsB,UAAWD,EAAQlB,MACpB,kBAACoB,EAAA,EAAD,CACIC,MAAM,gEACNC,QAAQ,WACRC,MAASZ,EACTa,SAZW,SAACC,GACpBb,EAAUa,EAAEC,cAAcH,MAAMI,WAY5B,kBAACtB,EAAD,CACIiB,QAAQ,YACRM,MAAM,UACNC,SAAYf,EACZgB,QAAWf,GACVD,EAAY,sDAAe,0DAEhC,kBAACL,EAAA,EAAD,CACIa,QAAQ,YACRM,MAAM,YACNE,QAAWd,GAHf,oDAMA,kBAACP,EAAA,EAAD,CACIa,QAAQ,YACRM,MAAM,UACNE,QAAY,WAAOb,GAAeJ,KACjCA,EAAU,6FAAoB,8E,yCC1DzCkB,EAAe,CACjBC,QAAS,GACTC,UAAW,GACXC,WAAW,GAqBFC,EAAU,SAACH,GAAD,IAAUC,EAAV,uDAAsB,OAAtB,MAAkC,CACrDG,KCtBwB,eDuBxBJ,UACAC,cAESI,EAAU,iBAAO,CAAED,KCzBJ,iBD2BbE,EA1BM,WAAmC,IAAlCC,EAAiC,uDAAzBR,EAAcS,EAAW,uCACnD,OAAQA,EAAOJ,MACX,ICJoB,eDKhB,OAAO,eACAG,EADP,CAEIP,QAASQ,EAAOR,QAChBC,UAAWO,EAAOP,UAClBC,WAAW,IAEnB,ICVoB,eDWhB,OAAO,eACAK,EADP,CAEIL,WAAW,IAEnB,QACI,OAAOK,IEjBbR,EAAe,CACjBjB,WAAW,EACXD,SAAS,EACT4B,OAAQ,IA0CCC,EAAkB,SAAC5B,GAAD,MAAgB,CAC3CsB,KD/C6B,qBCgD7BtB,cAyBW6B,EAnEM,WAAmC,IAAlCJ,EAAiC,uDAAzBR,EAAcS,EAAW,uCACnD,OAAQA,EAAOJ,MACX,IDViB,YCWb,OAAO,eACAG,EADP,CAEIzB,WAAW,EACX2B,OAAO,CAAED,EAAOI,OAAV,mBAAoBL,EAAME,WAExC,IDfmB,cCgBf,OAAO,eACAF,EADP,CAEIE,OAAQ,KAEhB,IDtBuB,kBCuBnB,OAAO,eACAF,EADP,CAEI1B,QAAS2B,EAAO3B,UAExB,IDxByB,qBCyBrB,OAAO,eACA0B,EADP,CAEIzB,UAAW0B,EAAO1B,YAE1B,QACI,OAAOyB,IChCbR,EAAe,CACjBpB,IAAK,IAcIC,EAAY,SAACD,GAAD,MAAU,CAC/ByB,KFlBsB,aEmBtBzB,QAGWkC,EAjBQ,WAAmC,IAAlCN,EAAiC,uDAAzBR,EAAcS,EAAW,uCACrD,OAAQA,EAAOJ,MACX,IFPkB,aEQd,OAAO,eACAG,EADP,CAEI5B,IAAK6B,EAAO7B,MAEpB,QACI,OAAO4B,ICoBJO,eARS,SAACP,GACrB,MAAO,CACH1B,QAAS0B,EAAMK,MAAM/B,QACrBC,UAAWyB,EAAMK,MAAM9B,UACvBH,IAAK4B,EAAMQ,QAAQpC,OAIa,CAACqC,SFsBjB,SAACrC,GACrB,OAAO,SAACsC,GAEJ,OADAA,EAASP,GAAgB,IGnDN,SAAC/B,GACvB,OAAOuC,IAAMC,IAAN,UAHA,uCAGA,oBAJI,gBAIJ,gBAA2CxC,IAC1CyC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QHkDxBC,CAAY5C,GACdyC,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BF,MAAK,SAACE,GACH,GAAIE,OAAOC,KAAKH,GAAMI,OAAQ,CAC1B,IAAIC,EAAW,CAACC,GAAIN,EAAKM,GAAIC,IAAKP,EAAKb,OAAOqB,gBAAgBD,IAAKlD,OACnEsC,EAzBgB,CAChCb,KDrCqB,YCsCrBQ,MAuBkCe,IAClBV,EFjCU,CAAEb,KCzBJ,sBC4DRa,EAASd,EAAQ,qIAA6B,YAGrD4B,OAAO,SAACC,GACLf,EAASd,EAAQ,qGAAD,OAA2B6B,EAA3B,KAAqC,aAExDC,SAAQ,WACLhB,EAASP,GAAgB,SExCU9B,YAAWuB,UAAS+B,WFU7C,iBAAO,CAAE9B,KDxCR,gBG8BwDnB,cFYtD,SAACJ,GAAD,MAAc,CACvCuB,KD7C2B,kBC8C3BvB,aEdWiC,EA1BU,SAACqB,GAetB,OAAO,kBAAC,EAAD,iBAAaA,EAAb,CAAoBpD,sBAbG,WACvBoD,EAAMxD,IAAI+C,OACTS,EAAMnB,SAASmB,EAAMxD,KAErBwD,EAAMhC,QAAQ,uGAAwB,YAS6BnB,uBAL5C,WAC3BmD,EAAMvD,UAAU,IAChBuD,EAAMD,oB,kBEdRrE,EAAYC,YAAW,CACzBE,KAAM,CACFoE,MAAO,IACPnE,OAAQ,OACRE,QAAS,eACTkE,OAAQ,WAEZC,MAAO,CACHF,MAAO,OACPG,OAAQ,WAeDC,EAZD,SAAC,GAAwB,IAAvB5B,EAAsB,EAAtBA,MAAOhC,EAAe,EAAfA,UACbM,EAAUrB,IAChB,OACQ,kBAAC4E,EAAA,EAAD,CAAMtD,UAAWD,EAAQlB,KAAM8B,QAAS,WAAOlB,EAAUgC,EAAMjC,OAC3D,kBAAC+D,EAAA,EAAD,CAAWvD,UAAWD,EAAQoD,MAC1B1B,MAAOA,EAAMiB,IACbc,MAAM,Y,SCjBpB9E,EAAYC,YAAW,CACzBE,KAAM,CACF4E,QAAS,GACT3E,OAAQ,UAEZ4E,KAAM,CACFC,UAAW,UAeJC,EAZI,SAAC,GAAoC,IAAnCtC,EAAkC,EAAlCA,OAAQuC,EAA0B,EAA1BA,UAAWpE,EAAe,EAAfA,UAC9BM,EAAUrB,IAChB,OACI,kBAAC4E,EAAA,EAAD,CAAMtD,UAAWD,EAAQlB,MACrB,kBAACiF,EAAA,EAAD,CAAYC,cAAY,EAAC5D,QAAQ,KAAK6D,UAAU,KAAKhE,UAAWD,EAAQ2D,MACnEG,GAEHvC,EAAO2C,KAAK,SAAAxC,GAAK,OAAI,kBAAC,EAAD,CAAOyC,IAAOzC,EAAMgB,GAAIhB,MAASA,EAAOhC,UAAaA,SChBlFf,EAAYC,YAAW,CACzBE,KAAM,CACF4E,QAAS,MA6BFU,EA1BA,SAAC,GAAkC,IAAjC7C,EAAgC,EAAhCA,OAAQ5B,EAAwB,EAAxBA,QAASD,EAAe,EAAfA,UAExBM,EAAUrB,IAEhB,OAAI2D,OAAOC,KAAKhB,GAAQiB,OAErB7C,EAEK,6BACM2C,OAAOC,KAAKhB,GAAQ2C,KAAK,SAACJ,EAAWK,GAAZ,OAAoB,kBAAC,EAAD,CAC3CA,IAAOA,EACP5C,OAAUA,EAAOuC,GACjBpE,UAAaA,EACboE,UAAaA,QAKrB,kBAACP,EAAA,EAAD,CAAMtD,UAAWD,EAAQlB,MACnByC,EAAO2C,KAAK,SAAAxC,GAAK,OAAI,kBAAC,EAAD,CAAOyC,IAAOzC,EAAMgB,GAAIhB,MAASA,EAAOhC,UAAaA,QAfjD,M,QCN9B2E,EAAgBC,YACzB,CALwB,SAACjD,GACzB,OAAOA,EAAMK,MAAMH,QAJD,SAACF,GACnB,OAAOA,EAAMK,MAAM/B,WAQnB,SAAC4B,EAAQ5B,GACL,OAAGA,EACqB4B,EAAOgD,QAAO,SAACC,EAAKC,GAQpC,OANKD,EAAIC,EAAIhF,OACT+E,EAAIC,EAAIhF,KAAO,IAGnB+E,EAAIC,EAAIhF,KAAKiF,KAAKD,GAEXD,IACR,IAGAjD,KCRAK,eAPS,SAACP,GACrB,MAAO,CACHE,OAAQ8C,EAAchD,GACtB1B,QAAS0B,EAAMK,MAAM/B,WAIW,CAACD,aAA1BkC,EAXS,SAACqB,GACrB,OAAO,kBAAC,EAAWA,M,SCeRrB,eARS,SAACP,GACrB,MAAO,CACHP,QAASO,EAAMsD,MAAM7D,QACrBC,UAAWM,EAAMsD,MAAM5D,UACvBC,UAAWK,EAAMsD,MAAM3D,aAIS,CAACG,WAA1BS,EAjBQ,SAAC,GAA8C,IAA7Cd,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,UAAWI,EAAwB,EAAxBA,QACzC,OADiE,EAAfH,UAG9C,kBAAC4D,EAAA,EAAD,CACIC,QAAS1D,EACT2D,SAAU/D,GAAYD,GAJR,QCUXiE,MAVf,WACE,OACE,yBAAK9E,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCY+E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCXAC,EAAWC,YAAgB,CAC7B5D,MAAOD,EACPI,QAASF,EACTgD,MAAOvD,IAMImE,EAHDC,YAAYH,EAAWI,YAAgBC,MCLrDC,IAASC,OAAO,kBAAC,IAAD,CAAUL,MAASA,GACf,kBAAC,EAAD,OACSM,SAASC,eAAe,SFyH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/D,MAAK,SAAAgE,GACJA,EAAaC,gBAEdtD,OAAM,SAAAC,GACLsD,QAAQtD,MAAMA,EAAMhC,c","file":"static/js/main.5fa6a3a5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {green} from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        margin: '20px auto'\r\n    },\r\n}));\r\n\r\nconst GreenButton = withStyles(theme => ({\r\n    root: {\r\n        backgroundColor: green[500],\r\n        '&:hover': {\r\n            backgroundColor: green[700],\r\n        },\r\n    },\r\n}))(Button);\r\n\r\n\r\n\r\nconst Buttons = ({tag, changeTag, isGroup, isLoading, handleClickLoadButton, handleClickClearButton, changeIsGroup}) => {\r\n    const changeTagField = (e) => {\r\n        changeTag(e.currentTarget.value.trim());\r\n    };\r\n\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <TextField\r\n                label=\"Введите тег\"\r\n                variant=\"outlined\"\r\n                value = {tag}\r\n                onChange = {changeTagField}/>\r\n            <GreenButton\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled = {isLoading}\r\n                onClick = {handleClickLoadButton}>\r\n                {isLoading ? 'Загрузка...': 'Загрузить'}\r\n            </GreenButton>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick = {handleClickClearButton}>\r\n                Очистить\r\n            </Button>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick = { () => {changeIsGroup(!isGroup)}}>\r\n                {isGroup ? 'Разгруппировать' : 'Группировать'}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import {SHOW_MESSAGE, HIDE_MESSAGE} from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n    message: '',\r\n    typeAlert: '',\r\n    isVisible: false\r\n};\r\nconst alertReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SHOW_MESSAGE:\r\n            return {\r\n                ...state,\r\n                message: action.message,\r\n                typeAlert: action.typeAlert,\r\n                isVisible: true\r\n            };\r\n        case HIDE_MESSAGE:\r\n            return {\r\n                ...state,\r\n                isVisible: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const showMsg = (message, typeAlert = 'info') => ({\r\n    type: SHOW_MESSAGE,\r\n    message,\r\n    typeAlert\r\n});\r\nexport const hideMsg = () => ({ type: HIDE_MESSAGE });\r\n\r\nexport default alertReducer;","export const CHANGE_TAG = 'CHANGE_TAG';\r\nexport const CHANGE_IS_GROUP = 'CHANGE_IS_GROUP';\r\nexport const SET_IMAGE = 'SET_IMAGE';\r\nexport const CLEAR_IMAGE = 'CLEAR_IMAGE';\r\nexport const CHANGE_IS_LOADING = 'CHANGE_IS_LOADING ';\r\nexport const SHOW_MESSAGE = 'SHOW_MESSAGE';\r\nexport const HIDE_MESSAGE = 'HIDE_MESSAGE';","import {CHANGE_IS_LOADING, CLEAR_IMAGE, SET_IMAGE, CHANGE_IS_GROUP} from \"./actionTypes\";\r\nimport {getImageApi} from \"../DAL/api\";\r\nimport {hideMsg, showMsg} from \"./alertReducer\";\r\n\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    isGroup: false,\r\n    images: []\r\n};\r\nconst imageReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_IMAGE:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                images: [action.image, ...state.images]\r\n            };\r\n        case CLEAR_IMAGE:\r\n            return {\r\n                ...state,\r\n                images: []\r\n            };\r\n        case CHANGE_IS_GROUP:\r\n            return {\r\n                ...state,\r\n                isGroup: action.isGroup\r\n            };\r\n        case CHANGE_IS_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setImage = (image) => ({\r\n    type: SET_IMAGE,\r\n    image\r\n});\r\n\r\nexport const clearImage = () => ({ type: CLEAR_IMAGE});\r\n\r\nexport const changeIsGroup = (isGroup) => ({\r\n    type: CHANGE_IS_GROUP,\r\n    isGroup\r\n});\r\n\r\nexport const changeIsLoading = (isLoading) => ({\r\n    type: CHANGE_IS_LOADING,\r\n    isLoading\r\n});\r\n\r\nexport const getImage = (tag) => {\r\n    return (dispatch) => {\r\n        dispatch(changeIsLoading(true));\r\n        return getImageApi(tag)\r\n            .then((response) => response.data)\r\n            .then((data) => {\r\n                if (Object.keys(data).length) {\r\n                    let newImage = {id: data.id, url: data.images.downsized_large.url, tag};\r\n                    dispatch(setImage(newImage));\r\n                    dispatch(hideMsg());\r\n                } else {\r\n                    dispatch(showMsg('По тегу ничего не найдено', 'info'));\r\n                }\r\n            })\r\n            .catch( (error) => {\r\n                dispatch(showMsg(`Произошла Ошибка HTTP (${error})`, 'error'));\r\n            })\r\n            .finally(() => {\r\n                dispatch(changeIsLoading(false));\r\n            })\r\n    };\r\n};\r\nexport default imageReducer;","import {CHANGE_TAG} from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n    tag: ''\r\n};\r\nconst buttonsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_TAG:\r\n            return {\r\n                ...state,\r\n                tag: action.tag\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const changeTag = (tag) => ({\r\n    type: CHANGE_TAG,\r\n    tag\r\n});\r\n\r\nexport default buttonsReducer;","import React from 'react';\r\nimport Buttons from \"./Buttons\";\r\nimport {connect} from \"react-redux\";\r\nimport {changeIsGroup, clearImage, getImage} from \"../../Redux/imageReducer\";\r\nimport {changeTag} from \"../../Redux/buttonsReducer\";\r\nimport {showMsg} from \"../../Redux/alertReducer\";\r\n\r\nconst ButtonsComponent = (props) => {\r\n\r\n    const handleClickLoadButton = () => {\r\n        if(props.tag.length){\r\n            props.getImage(props.tag);\r\n        } else {\r\n            props.showMsg('Заполните поле \"тег\"', 'warning');\r\n        }\r\n    };\r\n\r\n    const handleClickClearButton = () => {\r\n        props.changeTag('');\r\n        props.clearImage();\r\n    };\r\n\r\n    return <Buttons {...props} handleClickLoadButton = {handleClickLoadButton} handleClickClearButton={handleClickClearButton} />\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isGroup: state.image.isGroup,\r\n        isLoading: state.image.isLoading,\r\n        tag: state.buttons.tag\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {getImage, changeTag, showMsg, clearImage, changeIsGroup})(ButtonsComponent);","import axios from 'axios';\r\n\r\n\r\nconst API_KEY = 'dc6zaTOxFJmzC';\r\nconst URL = 'https://api.giphy.com/v1/gifs/random';\r\n\r\nexport const getImageApi = (tag) => {\r\n     return axios.get(`${URL}?api_key=${API_KEY}&tag=${tag}`)\r\n            .then(response => response.data);\r\n};","import React from 'react';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 300,\r\n        margin: '10px',\r\n        display: 'inline-block',\r\n        cursor: 'pointer'\r\n    },\r\n    media: {\r\n        width: '100%',\r\n        height: '200px'\r\n    }\r\n});\r\nconst Image = ({image, changeTag}) => {\r\n    const classes = useStyles();\r\n    return (\r\n            <Card className={classes.root} onClick={() => {changeTag(image.tag)}}>\r\n                <CardMedia className={classes.media}\r\n                    image={image.url}\r\n                    title=\"Image\"\r\n                />\r\n            </Card>\r\n    );\r\n};\r\n\r\nexport default Image;","import React from 'react';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Image from \"./Image\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        padding: 20,\r\n        margin: '20px 0'\r\n    },\r\n    text: {\r\n        textAlign: 'left'\r\n    }\r\n});\r\nconst ImageGroup = ({images, groupName, changeTag}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.root}>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h5\" className={classes.text}>\r\n                {groupName}\r\n            </Typography>\r\n            { images.map( image => <Image key = {image.id} image = {image} changeTag = {changeTag}/>) }\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ImageGroup;","import React from 'react';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Image from \"./Image\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport ImageGroup from \"./ImageGroup\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        padding: 30,\r\n    },\r\n});\r\nconst Images = ({images, isGroup, changeTag}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    if(!Object.keys(images).length) return null;\r\n\r\n    if(isGroup) {\r\n        return (\r\n            <div>\r\n                { Object.keys(images).map( (groupName, key) => <ImageGroup\r\n                    key = {key}\r\n                    images = {images[groupName]}\r\n                    changeTag = {changeTag}\r\n                    groupName = {groupName}/>) }\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <Card className={classes.root}>\r\n                { images.map( image => <Image key = {image.id} image = {image} changeTag = {changeTag}/>) }\r\n            </Card>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default Images;","import { createSelector } from \"reselect\";\r\n\r\nconst getIsGroupSlc = (state) => {\r\n    return state.image.isGroup;\r\n};\r\nexport const getImagesSlc = (state) => {\r\n    return state.image.images;\r\n};\r\n\r\nexport const getImagesRslc = createSelector(\r\n    [getImagesSlc, getIsGroupSlc],\r\n    (images, isGroup) => {\r\n        if(isGroup) {\r\n            const imagesGroup = images.reduce((acc, img) => {\r\n\r\n                if (!acc[img.tag]) {\r\n                    acc[img.tag] = [];\r\n                }\r\n\r\n                acc[img.tag].push(img);\r\n\r\n                return acc;\r\n            }, []);\r\n            return imagesGroup;\r\n        }\r\n        return images;\r\n    }\r\n);\r\n","import React from 'react';\r\nimport Images from \"./Images\";\r\nimport {connect} from \"react-redux\";\r\nimport {changeTag} from \"../../Redux/buttonsReducer\";\r\nimport {getImagesRslc} from \"../../Redux/selectors\";\r\n\r\nconst ImagesComponent = (props) => {\r\n    return <Images {...props} />\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        images: getImagesRslc(state),\r\n        isGroup: state.image.isGroup\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {changeTag})(ImagesComponent);\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {hideMsg} from \"../../Redux/alertReducer\";\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nconst AlertComponent = ({message, typeAlert, hideMsg, isVisible}) => {\r\n    if(!isVisible) return null;\r\n    return (\r\n        <Alert\r\n            onClose={hideMsg}\r\n            severity={typeAlert}>{message}</Alert>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        message: state.alert.message,\r\n        typeAlert: state.alert.typeAlert,\r\n        isVisible: state.alert.isVisible\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {hideMsg})(AlertComponent);","import React from 'react';\nimport './App.css';\nimport Buttons from \"./components/Buttons/ButtonsContainer\";\nimport Images from \"./components/Images/ImagesContainer\";\nimport AlertComponent from \"./components/Alert/AlertComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <AlertComponent />\n        <Buttons />\n        <Images/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport imageReducer from \"./imageReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport buttonsReducer from \"./buttonsReducer\";\r\nimport alertReducer from \"./alertReducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n    image: imageReducer,\r\n    buttons: buttonsReducer,\r\n    alert: alertReducer\r\n});\r\n\r\nconst store = createStore(reducers,  applyMiddleware(thunk));\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./Redux/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(<Provider store = {store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}